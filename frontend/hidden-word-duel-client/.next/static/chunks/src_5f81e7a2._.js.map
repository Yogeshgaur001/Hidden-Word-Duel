{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/asus/OneDrive/Desktop/hidden%20Word%20Duel/hwd%20frontend/hidden-word-duel-client/src/contexts/GameContext.tsx"],"sourcesContent":["import React, { createContext, useReducer, useContext, ReactNode, Dispatch } from 'react';\r\nimport { GameState, RevealedLetter } from '@/types';\r\n\r\ntype Action =\r\n  | { type: 'CONNECTING' }\r\n  | { type: 'CONNECTED_TO_LOBBY' }\r\n  | { type: 'WAITING_FOR_OPPONENT' }\r\n  | { type: 'START_ROUND'; payload: import('@/types').StartRoundPayload }\r\n  | { type: 'TICK_START'; payload: import('@/types').TickStartPayload }\r\n  | { type: 'REVEAL_TILE'; payload: import('@/types').RevealTilePayload }\r\n  | { type: 'SUBMIT_GUESS_ATTEMPT' }\r\n  | { type: 'GUESS_SUBMITTED' }\r\n  | { type: 'ROUND_END'; payload: import('@/types').RoundEndPayload }\r\n  | { type: 'MATCH_END'; payload: import('@/types').MatchEndPayload }\r\n  | { type: 'SET_NOTIFICATION'; payload: GameState['notification'] }\r\n  | { type: 'CLEAR_NOTIFICATION' }\r\n  | { type: 'UPDATE_TIMER'; payload: number }\r\n  | { type: 'OPPONENT_DISCONNECTED'; payload: import('@/types').OpponentDisconnectedPayload };\r\n\r\n\r\nconst initialRevealedWord = (length: number): RevealedLetter[] =>\r\n  Array(length).fill(null).map(() => ({ letter: null, isRevealed: false }));\r\n\r\nconst initialState: GameState = {\r\n  roundId: null,\r\n  wordLength: 0,\r\n  revealedWord: [],\r\n  players: [],\r\n  currentPlayerId: null,\r\n  opponentPlayerId: null,\r\n  currentRound: 0,\r\n  totalRounds: 5, // Example\r\n  timeLeftInTick: 0,\r\n  isTickActive: false,\r\n  gameStatus: 'lobby',\r\n  roundWinner: null,\r\n  matchWinner: null,\r\n  lastRevealedWord: null,\r\n  guessSubmittedThisTick: false,\r\n  notification: null,\r\n};\r\n\r\nconst GameContext = createContext<{ state: GameState; dispatch: Dispatch<Action> } | undefined>(undefined);\r\n\r\nconst gameReducer = (state: GameState, action: Action): GameState => {\r\n  switch (action.type) {\r\n    case 'CONNECTING':\r\n      return { ...state, gameStatus: 'lobby', notification: { type: 'info', message: 'Connecting to server...' } };\r\n    case 'CONNECTED_TO_LOBBY':\r\n      return { ...state, gameStatus: 'lobby', notification: { type: 'info', message: 'Connected! Waiting for lobby...' } };\r\n    case 'WAITING_FOR_OPPONENT':\r\n      return { ...state, gameStatus: 'waiting', notification: { type: 'info', message: 'Waiting for an opponent...' } };\r\n    case 'START_ROUND': {\r\n      const { roundId, wordLength, roundNumber, player1, player2, currentPlayerId } = action.payload;\r\n      // Determine who is the opponent\r\n      const opponent = currentPlayerId === player1.id ? player2 : player1;\r\n      return {\r\n        ...initialState, // Reset most things for new round\r\n        gameStatus: 'playing',\r\n        roundId,\r\n        wordLength,\r\n        revealedWord: initialRevealedWord(wordLength),\r\n        currentRound: roundNumber,\r\n        players: [player1, player2],\r\n        currentPlayerId: currentPlayerId,\r\n        opponentPlayerId: opponent.id,\r\n        notification: { type: 'info', message: `Round ${roundNumber} starting! Guess the ${wordLength}-letter word.` },\r\n      };\r\n    }\r\n    case 'TICK_START':\r\n      return {\r\n        ...state,\r\n        isTickActive: true,\r\n        timeLeftInTick: action.payload.tickDuration / 1000, // Convert ms to s\r\n        guessSubmittedThisTick: false,\r\n        notification: { type: 'info', message: 'New tick! Make your guess.' },\r\n      };\r\n    case 'REVEAL_TILE': {\r\n      const newRevealedWord = [...state.revealedWord];\r\n      newRevealedWord[action.payload.index] = { letter: action.payload.letter, isRevealed: true };\r\n      return { ...state, revealedWord: newRevealedWord, isTickActive: false };\r\n    }\r\n    case 'SUBMIT_GUESS_ATTEMPT':\r\n      return { ...state, guessSubmittedThisTick: true };\r\n    case 'GUESS_SUBMITTED': // Optional: could be used for UI feedback\r\n      return { ...state, notification: { type: 'info', message: 'Guess submitted!' } };\r\n    case 'ROUND_END': {\r\n      const { winner, revealedWord, player1Score, player2Score } = action.payload;\r\n      const updatedPlayers = state.players.map(p =>\r\n        p.id === state.players[0].id ? { ...p, score: player1Score } : { ...p, score: player2Score }\r\n      );\r\n      let message = `Round over! The word was: ${revealedWord}. `;\r\n      if (winner === 'draw') message += \"It's a draw!\";\r\n      else if (winner) {\r\n        const winnerPlayer = updatedPlayers.find(p => p.id === winner);\r\n        message += `${winnerPlayer?.username || 'Player'} won the round!`;\r\n      } else message += \"No one guessed it right.\";\r\n\r\n      return {\r\n        ...state,\r\n        gameStatus: 'roundOver',\r\n        roundWinner: winner,\r\n        lastRevealedWord: revealedWord,\r\n        players: updatedPlayers,\r\n        isTickActive: false,\r\n        notification: { type: 'success', message },\r\n      };\r\n    }\r\n    case 'MATCH_END': {\r\n      const { winner, finalScores } = action.payload;\r\n      const updatedPlayers = state.players.map(p =>\r\n        p.id === state.players[0].id ? { ...p, score: finalScores.player1 } : { ...p, score: finalScores.player2 }\r\n      );\r\n      let message = \"Match Over! \";\r\n      if (winner === 'draw') message += \"It's a draw!\";\r\n      else if (winner) {\r\n        const winnerPlayer = updatedPlayers.find(p => p.id === winner);\r\n        message += `${winnerPlayer?.username || 'Player'} won the match!`;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        gameStatus: 'matchOver',\r\n        matchWinner: winner,\r\n        players: updatedPlayers,\r\n        isTickActive: false,\r\n        notification: { type: 'success', message },\r\n      };\r\n    }\r\n    case 'UPDATE_TIMER':\r\n      return { ...state, timeLeftInTick: action.payload };\r\n    case 'SET_NOTIFICATION':\r\n      return { ...state, notification: action.payload };\r\n    case 'CLEAR_NOTIFICATION':\r\n      return { ...state, notification: null };\r\n    case 'OPPONENT_DISCONNECTED':\r\n        return {\r\n            ...state,\r\n            gameStatus: 'matchOver', // Or a specific 'opponentDisconnected' status\r\n            matchWinner: state.currentPlayerId, // Award win to current player\r\n            notification: { type: 'error', message: action.payload.message },\r\n        };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }: { children: ReactNode }) => {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n  return (\r\n    <GameContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGame = () => {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/asus/OneDrive/Desktop/hidden%20Word%20Duel/hwd%20frontend/hidden-word-duel-client/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { useGame } from '@/contexts/GameContext';\r\nimport { StartRoundPayload, TickStartPayload, RevealTilePayload, RoundEndPayload, MatchEndPayload, OpponentDisconnectedPayload } from '@/types';\r\n\r\n// Ensure this URL points to your NestJS backend WebSocket server\r\nconst SOCKET_SERVER_URL = process.env.NEXT_PUBLIC_SOCKET_SERVER_URL || 'http://localhost:3001'; // Use an env variable\r\n\r\nexport const useWebSocket = () => {\r\n  const { dispatch } = useGame();\r\n  const socketRef = useRef<Socket | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!SOCKET_SERVER_URL) {\r\n      console.error(\"Socket server URL is not defined!\");\r\n      dispatch({ type: 'SET_NOTIFICATION', payload: { type: 'error', message: 'Server configuration error.' }});\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: 'CONNECTING' });\r\n    const socket = io(SOCKET_SERVER_URL, {\r\n      // Add any necessary options, e.g., for authentication if you implement it\r\n    });\r\n    socketRef.current = socket;\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Connected to WebSocket server:', socket.id);\r\n      dispatch({ type: 'CONNECTED_TO_LOBBY' });\r\n      // Client is ready, could emit a 'joinLobby' event if your backend requires it\r\n      // For this spec, it seems two players connecting automatically starts things.\r\n    });\r\n\r\n    socket.on('connect_error', (err) => {\r\n      console.error('Connection error:', err);\r\n      dispatch({ type: 'SET_NOTIFICATION', payload: { type: 'error', message: `Connection Error: ${err.message}` } });\r\n    });\r\n\r\n    socket.on('waitingForOpponent', () => {\r\n        dispatch({ type: 'WAITING_FOR_OPPONENT' });\r\n    });\r\n\r\n    socket.on('startRound', (data: StartRoundPayload) => {\r\n      console.log('startRound received:', data);\r\n      dispatch({ type: 'START_ROUND', payload: data });\r\n    });\r\n\r\n    socket.on('tickStart', (data: TickStartPayload) => {\r\n      console.log('tickStart received:', data);\r\n      dispatch({ type: 'TICK_START', payload: data });\r\n    });\r\n\r\n    socket.on('revealTile', (data: RevealTilePayload) => {\r\n      console.log('revealTile received:', data);\r\n      dispatch({ type: 'REVEAL_TILE', payload: data });\r\n    });\r\n\r\n    socket.on('roundEnd', (data: RoundEndPayload) => {\r\n      console.log('roundEnd received:', data);\r\n      dispatch({ type: 'ROUND_END', payload: data });\r\n    });\r\n\r\n    socket.on('matchEnd', (data: MatchEndPayload) => {\r\n      console.log('matchEnd received:', data);\r\n      dispatch({ type: 'MATCH_END', payload: data });\r\n    });\r\n\r\n    socket.on('opponentDisconnected', (data: OpponentDisconnectedPayload) => {\r\n        console.log('opponentDisconnected received:', data);\r\n        dispatch({ type: 'OPPONENT_DISCONNECTED', payload: data });\r\n    });\r\n\r\n    socket.on('error', (errorMsg: string) => {\r\n        console.error('Server error:', errorMsg);\r\n        dispatch({ type: 'SET_NOTIFICATION', payload: { type: 'error', message: errorMsg }});\r\n    });\r\n\r\n\r\n    socket.on('disconnect', (reason) => {\r\n      console.log('Disconnected from WebSocket server:', reason);\r\n      dispatch({ type: 'SET_NOTIFICATION', payload: { type: 'error', message: 'Disconnected from server.' } });\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      socketRef.current = null;\r\n    };\r\n  }, [dispatch]);\r\n\r\n  const submitGuess = (roundId: string, guessText: string) => {\r\n    if (socketRef.current && roundId) {\r\n      socketRef.current.emit('submitGuess', { roundId, guessText });\r\n      dispatch({ type: 'SUBMIT_GUESS_ATTEMPT' }); // Optimistic UI update\r\n    }\r\n  };\r\n\r\n  // Add other emit functions as needed, e.g., joinLobby, leaveGame\r\n\r\n  return { submitGuess };\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 430, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/asus/OneDrive/Desktop/hidden%20Word%20Duel/hwd%20frontend/hidden-word-duel-client/src/components/ui/notificationBar.tsx"],"sourcesContent":["'use client';\r\nimport { useEffect } from 'react';\r\nimport { useGame } from '@/contexts/GameContext';\r\n\r\nexport default function NotificationBar() {\r\n  const { state, dispatch } = useGame();\r\n  const { notification } = state;\r\n\r\n  useEffect(() => {\r\n    if (notification) {\r\n      const timer = setTimeout(() => {\r\n        dispatch({ type: 'CLEAR_NOTIFICATION' });\r\n      }, 5000); // Auto-clear after 5 seconds\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [notification, dispatch]);\r\n\r\n  if (!notification) return null;\r\n\r\n  const baseClasses = \"fixed top-4 left-1/2 -translate-x-1/2 p-4 rounded-md shadow-lg text-white z-50 text-sm md:text-base\";\r\n  const typeClasses = {\r\n    info: 'bg-blue-600',\r\n    success: 'bg-green-600',\r\n    error: 'bg-red-600',\r\n  };\r\n\r\n  return (\r\n    <div className={`${baseClasses} ${typeClasses[notification.type]}`}>\r\n      {notification.message}\r\n      <button\r\n        onClick={() => dispatch({ type: 'CLEAR_NOTIFICATION' })}\r\n        className=\"ml-4 font-bold text-sm\"\r\n        aria-label=\"Close notification\"\r\n      >\r\n        ✕\r\n      </button>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AACA;AACA;;;AAFA;;;AAIe,SAAS;;IACtB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,kIAAA,CAAA,UAAO,AAAD;IAClC,MAAM,EAAE,YAAY,EAAE,GAAG;IAEzB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACR,IAAI,cAAc;gBAChB,MAAM,QAAQ;uDAAW;wBACvB,SAAS;4BAAE,MAAM;wBAAqB;oBACxC;sDAAG,OAAO,6BAA6B;gBACvC;iDAAO,IAAM,aAAa;;YAC5B;QACF;oCAAG;QAAC;QAAc;KAAS;IAE3B,IAAI,CAAC,cAAc,OAAO;IAE1B,MAAM,cAAc;IACpB,MAAM,cAAc;QAClB,MAAM;QACN,SAAS;QACT,OAAO;IACT;IAEA,qBACE,6LAAC;QAAI,WAAW,GAAG,YAAY,CAAC,EAAE,WAAW,CAAC,aAAa,IAAI,CAAC,EAAE;;YAC/D,aAAa,OAAO;0BACrB,6LAAC;gBACC,SAAS,IAAM,SAAS;wBAAE,MAAM;oBAAqB;gBACrD,WAAU;gBACV,cAAW;0BACZ;;;;;;;;;;;;AAKP;GAlCwB;;QACM,kIAAA,CAAA,UAAO;;;KADb","debugId":null}},
    {"offset": {"line": 511, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/asus/OneDrive/Desktop/hidden%20Word%20Duel/hwd%20frontend/hidden-word-duel-client/src/app/page.tsx"],"sourcesContent":["'use client'; // Required for hooks\n\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useGame } from '@/contexts/GameContext';\nimport Modal from '@/components/ui/Modal';\nimport Button from '@/components/ui/Button';\nimport { useWebSocket } from '@/hooks/useWebSocket'; // Initialize WS connection here or in GamePage\nimport NotificationBar from '@/components/ui/notificationBar';\n\nexport default function HomePage() {\n  const { state } = useGame();\n  const router = useRouter();\n\n  // Initialize WebSocket connection when component mounts or when game status is appropriate\n  // The useWebSocket hook itself handles initialization on mount\n  // We just call it here to make sure it's active.\n  useWebSocket(); // This will trigger connection attempt\n\n  useEffect(() => {\n    // If a round starts, navigate to the game page\n    if (state.gameStatus === 'playing' || state.gameStatus === 'roundOver') {\n      router.push('/game');\n    }\n  }, [state.gameStatus, router]);\n\n  return (\n    <div className=\"flex flex-col items-center justify-center text-center h-full\">\n      <NotificationBar />\n      {state.gameStatus === 'lobby' && (\n        <div className=\"space-y-4\">\n          <h2 className=\"text-2xl font-semibold\">Welcome to Hidden Word Duel!</h2>\n          <p className=\"text-lg\">Connecting to the server...</p>\n          <div className=\"animate-pulse\">\n            <div className=\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full inline-block animate-spin\"></div>\n          </div>\n        </div>\n      )}\n      {state.gameStatus === 'waiting' && (\n        <div className=\"space-y-4\">\n          <h2 className=\"text-2xl font-semibold\">Waiting for an Opponent</h2>\n          <p className=\"text-lg\">Hang tight, we're finding someone for you to duel!</p>\n          <div className=\"animate-pulse\">\n            <div className=\"w-12 h-12 border-4 border-secondary border-t-transparent rounded-full inline-block animate-spin\"></div>\n          </div>\n        </div>\n      )}\n       {/* Could add a button to manually join if that's part of the flow */}\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAGA,gOAAqD,+CAA+C;AACpG;;;AARA,cAAc,qBAAqB;;;;;;AAUpB,SAAS;;IACtB,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,kIAAA,CAAA,UAAO,AAAD;IACxB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,2FAA2F;IAC3F,+DAA+D;IAC/D,iDAAiD;IACjD,CAAA,GAAA,+HAAA,CAAA,eAAY,AAAD,KAAK,uCAAuC;IAEvD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8BAAE;YACR,+CAA+C;YAC/C,IAAI,MAAM,UAAU,KAAK,aAAa,MAAM,UAAU,KAAK,aAAa;gBACtE,OAAO,IAAI,CAAC;YACd;QACF;6BAAG;QAAC,MAAM,UAAU;QAAE;KAAO;IAE7B,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,8IAAA,CAAA,UAAe;;;;;YACf,MAAM,UAAU,KAAK,yBACpB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAyB;;;;;;kCACvC,6LAAC;wBAAE,WAAU;kCAAU;;;;;;kCACvB,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;;;;;;;;;;;;;;;;;YAIpB,MAAM,UAAU,KAAK,2BACpB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAyB;;;;;;kCACvC,6LAAC;wBAAE,WAAU;kCAAU;;;;;;kCACvB,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;;;;;;;;;;;;;;;;;;;;;;;AAO3B;GAxCwB;;QACJ,kIAAA,CAAA,UAAO;QACV,qIAAA,CAAA,YAAS;QAKxB,+HAAA,CAAA,eAAY;;;KAPU","debugId":null}}]
}