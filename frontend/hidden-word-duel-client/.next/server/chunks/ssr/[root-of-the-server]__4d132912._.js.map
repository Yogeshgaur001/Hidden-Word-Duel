{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/asus/OneDrive/Desktop/hidden%20Word%20Duel/hwd%20frontend/hidden-word-duel-client/src/contexts/GameContext.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { createContext, useReducer, useContext, ReactNode, Dispatch } from 'react';\r\nimport { GameState, RevealedLetter } from '@/types';\r\n\r\ntype Action =\r\n  | { type: 'CONNECTING' }\r\n  | { type: 'CONNECTED_TO_LOBBY' }\r\n  | { type: 'WAITING_FOR_OPPONENT' }\r\n  | { type: 'START_ROUND'; payload: import('@/types').StartRoundPayload }\r\n  | { type: 'TICK_START'; payload: import('@/types').TickStartPayload }\r\n  | { type: 'REVEAL_TILE'; payload: import('@/types').RevealTilePayload }\r\n  | { type: 'SUBMIT_GUESS_ATTEMPT' }\r\n  | { type: 'GUESS_SUBMITTED' }\r\n  | { type: 'ROUND_END'; payload: import('@/types').RoundEndPayload }\r\n  | { type: 'MATCH_END'; payload: import('@/types').MatchEndPayload }\r\n  | { type: 'SET_NOTIFICATION'; payload: GameState['notification'] }\r\n  | { type: 'CLEAR_NOTIFICATION' }\r\n  | { type: 'UPDATE_TIMER'; payload: number }\r\n  | { type: 'OPPONENT_DISCONNECTED'; payload: import('@/types').OpponentDisconnectedPayload };\r\n\r\n\r\nconst initialRevealedWord = (length: number): RevealedLetter[] =>\r\n  Array(length).fill(null).map(() => ({ letter: null, isRevealed: false }));\r\n\r\nconst initialState: GameState = {\r\n  roundId: null,\r\n  wordLength: 0,\r\n  revealedWord: [],\r\n  players: [],\r\n  currentPlayerId: null,\r\n  opponentPlayerId: null,\r\n  currentRound: 0,\r\n  totalRounds: 5, // Example\r\n  timeLeftInTick: 0,\r\n  isTickActive: false,\r\n  gameStatus: 'lobby',\r\n  roundWinner: null,\r\n  matchWinner: null,\r\n  lastRevealedWord: null,\r\n  guessSubmittedThisTick: false,\r\n  notification: null,\r\n};\r\n\r\nconst GameContext = createContext<{ state: GameState; dispatch: Dispatch<Action> } | undefined>(undefined);\r\n\r\nconst gameReducer = (state: GameState, action: Action): GameState => {\r\n  switch (action.type) {\r\n    case 'CONNECTING':\r\n      return { ...state, gameStatus: 'lobby', notification: { type: 'info', message: 'Connecting to server...' } };\r\n    case 'CONNECTED_TO_LOBBY':\r\n      return { ...state, gameStatus: 'lobby', notification: { type: 'info', message: 'Connected! Waiting for lobby...' } };\r\n    case 'WAITING_FOR_OPPONENT':\r\n      return { ...state, gameStatus: 'waiting', notification: { type: 'info', message: 'Waiting for an opponent...' } };\r\n    case 'START_ROUND': {\r\n      const { roundId, wordLength, roundNumber, player1, player2, currentPlayerId } = action.payload;\r\n      // Determine who is the opponent\r\n      const opponent = currentPlayerId === player1.id ? player2 : player1;\r\n      return {\r\n        ...initialState, // Reset most things for new round\r\n        gameStatus: 'playing',\r\n        roundId,\r\n        wordLength,\r\n        revealedWord: initialRevealedWord(wordLength),\r\n        currentRound: roundNumber,\r\n        players: [player1, player2],\r\n        currentPlayerId: currentPlayerId,\r\n        opponentPlayerId: opponent.id,\r\n        notification: { type: 'info', message: `Round ${roundNumber} starting! Guess the ${wordLength}-letter word.` },\r\n      };\r\n    }\r\n    case 'TICK_START':\r\n      return {\r\n        ...state,\r\n        isTickActive: true,\r\n        timeLeftInTick: action.payload.tickDuration / 1000, // Convert ms to s\r\n        guessSubmittedThisTick: false,\r\n        notification: { type: 'info', message: 'New tick! Make your guess.' },\r\n      };\r\n    case 'REVEAL_TILE': {\r\n      const newRevealedWord = [...state.revealedWord];\r\n      newRevealedWord[action.payload.index] = { letter: action.payload.letter, isRevealed: true };\r\n      return { ...state, revealedWord: newRevealedWord, isTickActive: false };\r\n    }\r\n    case 'SUBMIT_GUESS_ATTEMPT':\r\n      return { ...state, guessSubmittedThisTick: true };\r\n    case 'GUESS_SUBMITTED': // Optional: could be used for UI feedback\r\n      return { ...state, notification: { type: 'info', message: 'Guess submitted!' } };\r\n    case 'ROUND_END': {\r\n      const { winner, revealedWord, player1Score, player2Score } = action.payload;\r\n      const updatedPlayers = state.players.map(p =>\r\n        p.id === state.players[0].id ? { ...p, score: player1Score } : { ...p, score: player2Score }\r\n      );\r\n      let message = `Round over! The word was: ${revealedWord}. `;\r\n      if (winner === 'draw') message += \"It's a draw!\";\r\n      else if (winner) {\r\n        const winnerPlayer = updatedPlayers.find(p => p.id === winner);\r\n        message += `${winnerPlayer?.username || 'Player'} won the round!`;\r\n      } else message += \"No one guessed it right.\";\r\n\r\n      return {\r\n        ...state,\r\n        gameStatus: 'roundOver',\r\n        roundWinner: winner,\r\n        lastRevealedWord: revealedWord,\r\n        players: updatedPlayers,\r\n        isTickActive: false,\r\n        notification: { type: 'success', message },\r\n      };\r\n    }\r\n    case 'MATCH_END': {\r\n      const { winner, finalScores } = action.payload;\r\n      const updatedPlayers = state.players.map(p =>\r\n        p.id === state.players[0].id ? { ...p, score: finalScores.player1 } : { ...p, score: finalScores.player2 }\r\n      );\r\n      let message = \"Match Over! \";\r\n      if (winner === 'draw') message += \"It's a draw!\";\r\n      else if (winner) {\r\n        const winnerPlayer = updatedPlayers.find(p => p.id === winner);\r\n        message += `${winnerPlayer?.username || 'Player'} won the match!`;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        gameStatus: 'matchOver',\r\n        matchWinner: winner,\r\n        players: updatedPlayers,\r\n        isTickActive: false,\r\n        notification: { type: 'success', message },\r\n      };\r\n    }\r\n    case 'UPDATE_TIMER':\r\n      return { ...state, timeLeftInTick: action.payload };\r\n    case 'SET_NOTIFICATION':\r\n      return { ...state, notification: action.payload };\r\n    case 'CLEAR_NOTIFICATION':\r\n      return { ...state, notification: null };\r\n    case 'OPPONENT_DISCONNECTED':\r\n        return {\r\n            ...state,\r\n            gameStatus: 'matchOver', // Or a specific 'opponentDisconnected' status\r\n            matchWinner: state.currentPlayerId, // Award win to current player\r\n            notification: { type: 'error', message: action.payload.message },\r\n        };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }: { children: ReactNode }) => {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n  return (\r\n    <GameContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGame = () => {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};"],"names":[],"mappings":"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","debugId":null}}]
}